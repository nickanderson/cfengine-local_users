bundle agent inventory_local_nix_users_discover
# @brief Discover local user information
#
# This bundle does local user discovery by parsing /etc/passwd and /etc/shadow
# on linux and unix systems.
# The companion bundles inventory_local_users_* if enabled will report the
# variables with inventory tags to populate the inventory.
#
# **See Also:**
# * `inventory_local_users_password_last_change`
# * `inventory_local_users`
# * `inventory_local_users_locked`
# * `inventory_local_users_password_empty`
{
  vars:
      "passwd_file" string => "/etc/passwd";
      "shadow_file" string => "/etc/shadow";
      "required_files" slist => { "$(passwd_file)", "$(shadow_file)" };

  vars:

    have_shadow_and_passwd_files::
      # 500 local users and 1MB of data for passwd or shadow seems like a reasonable limit.
      "shadow_data" data => data_readstringarray( $(shadow_file), "", ":", 500, 1M );
      "passwd_data" data => data_readstringarray( $(passwd_file), "", ":", 500, 1M );

      "all_local_users"
        slist => getindices("passwd_data");

      "all_local_users_canonified_map[$(all_local_users)]"
        string => canonify($(all_local_users));

      "all_local_users_canonified_list"
        slist => maplist("$(local_users_canonified_list[$(this)])", "local_users"),
        comment => "A canonified list is useful when dealing with variables
                    because user names may contain characters that are invalid
                    in variable names";

    # Fore each user element build an array of users and their values

      "epoch_last_password_change[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][1])";

      "min_password_age[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][2])";

      "max_password_age[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][3])";

      "password_warning_period[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][4])";

      "password_inactivity_period[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][5])";

      "account_expiration_date[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][6])";

      "numeric_user_id[$(all_local_users)]"
        string => "$(passwd_data[$(all_local_users)][1])";

      "numeric_group_id[$(all_local_users)]"
        string => "$(passwd_data[$(all_local_users)][2])";

      "comment[$(all_local_users)]"
        string => "$(passwd_data[$(all_local_users)][3])";

      "home_directory[$(all_local_users)]"
        string => "$(passwd_data[$(all_local_users)][4])";

      "shell[$(all_local_users)]"
        string => "$(passwd_data[$(all_local_users)][5])";

      "encrypted_password[$(all_local_users)]"
        string => "$(shadow_data[$(all_local_users)][0])";

      "password_locked[$(all_local_users)]"
        string => "True",
        ifvarclass => canonify("$(all_local_users)_password_locked");

      "password_locked_users" slist => getindices(password_locked);

      "password_empty[$(all_local_users)]"
        string => "True",
        ifvarclass => canonify("$(all_local_users)_password_empty");

      "password_empty_users" slist => getindices(password_empty);

      "password_valid_hash[$(all_local_users)]"
        string => "True",
        ifvarclass => canonify("$(all_local_users)_password_valid_hash");

      "password_valid_hash_users" slist => getindices(password_valid_hash);

      "password_invalid_hash[$(all_local_users)]"
        string => "True",
        ifvarclass => canonify("$(all_local_users)_password_invalid_hash");

      "password_invalid_hash_users" slist => getindices(password_invalid_hash);

    linux.(DEBUG|DEBUG_inventory_local_nix_users_discover)::
      "all_local_users_str"
        string => join(", ", all_local_users),
        comment => "Having a combined string of users is useful for debug reports";



  classes:

      "have_shadow_and_passwd_files" expression => filesexist(@(required_files));

      "$(all_local_users)_password_locked"
        expression => regcmp( "^!.*", "$(encrypted_password[$(all_local_users)])" ),
        comment => "A password field starting with exclimation point is a locked account";

      "$(all_local_users)_password_empty"
        expression => regcmp( "", "$(encrypted_password[$(all_local_users)])" ),
        comment => "An empty password field may allow passwordless login, it
                    depends on the application reading the shadow file.";

      "$(all_local_users)_password_valid_hash"
        expression => regcmp( "\Q$\E(1|2a|5|6)\$.*", "$(encrypted_password[$(all_local_users)])" ),
        comment => "If the hashed password matches this regex then we think we
                    have a valid password hash. Note: It may or may not be
                    valid for the speicifc platform. For example EL5 does not
                    support sha512 hashed passwords (hashes starting with $6$).";

      "$(all_local_users)_password_invalid_hash"
        not => "$(all_local_users_canonified_map[$(all_local_users)])_password_valid_hash",
        comment => "If the password has is not valid it must be invalid. This
                    could mean locked, empty or otherwise invalid.";

  reports:
    DEBUG|DEBUG_inventory_local_nix_users_discover::
      "DEBUG $(this.bundle)";
      "$(const.t)Unsupported system (missing '$(passwd_file)' and or '$(shadow_file))'"
        ifvarclass => "!have_shadow_and_passwd_files";

    (DEBUG|DEBUG_inventory_local_nix_users_discover).have_shadow_and_passwd_files::
      "$(const.t)Discovered: '$(all_local_users_str)'";
      "$(const.t)Last Password Change Epoch: '$(all_local_users)'='$(epoch_last_password_change[$(all_local_users)])'";
      "$(const.t)Min Password Age: '$(all_local_users)'='$(min_password_age[$(all_local_users)])'";
      "$(const.t)Max Password Age: '$(all_local_users)'='$(max_password_age[$(all_local_users)])'";
      "$(const.t)Password Warning Period: '$(all_local_users)'='$(password_warning_period[$(all_local_users)])'";
      "$(const.t)Password Inactivity Period: '$(all_local_users)'='$(password_inactivity_period[$(all_local_users)])'";
      "$(const.t)Account Expiration Date: '$(all_local_users)'='$(account_expiration_date[$(all_local_users)])'";
      "$(const.t)Numeric User ID: '$(all_local_users)'='$(numeric_user_id[$(all_local_users)])'";
      "$(const.t)Username/Comment: '$(all_local_users)'='$(comment[$(all_local_users)])'";
      "$(const.t)Home Directory: '$(all_local_users)'='$(home_directory[$(all_local_users)])'";
      "$(const.t)Shell: '$(all_local_users)'='$(shell[$(all_local_users)])'";
      "$(const.t)Locked Account: '$(password_locked_users)'";
      "$(const.t)Empty Password: '$(password_empty_users)'";
      "$(const.t)Valid Password Hash: '$(password_valid_hash_users)'";
      "$(const.t)Invalid Password Hash: '$(password_invalid_hash_users)'";
}

